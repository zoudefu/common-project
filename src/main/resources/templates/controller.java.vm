package ${package.Controller};

import com.baomidou.mybatisplus.core.metadata.IPage;
#if(${restControllerStyle})
import org.springframework.web.bind.annotation.RestController;
#else
import org.springframework.stereotype.Controller;
#end
#if(${superControllerClassPackage})
import ${superControllerClassPackage};
#end
import org.springframework.beans.factory.annotation.Autowired;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import com.common.project.generator.base.PagePojo;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody

import ${package.Service}.${table.serviceName};
import ${package.Entity}.${entity};
import lombok.extern.slf4j.Slf4j;
import java.util.Arrays;
import java.util.List;

import com.common.project.generator.base.Response;
import com.common.project.generator.base.ResponseCallBack;
import com.common.project.generator.base.ResponseCriteria;

/**
 *
 * @author ${author}
 * @date ${date}
 */
 
#*@RequestMapping("/#if(${package.ModuleName})${package.ModuleName}#end/#if(${controllerMappingHyphenStyle})${controllerMappingHyphen}#else${table.entityPath}#end")*#
@Slf4j
@Api(tags = "$!{table.comment}")
#if(${restControllerStyle})
@RestController
#else
@Controller
#end
@RequestMapping("/${table.entityPath}")
#if(${superControllerClass})
public class ${table.controllerName} extends ${superControllerClass}<${entity}> {
#else
public class ${table.controllerName} {
#end
    

    @Autowired
    public ${table.serviceName} i${entity}Service;

    /**
     * 分页查询数据
     * @param pagePojo 分页信息
     * @param ${table.entityPath} 查询条件
     * @return
     */
    @ApiOperation(value = "分页查询$!{table.comment}")
    @RequestMapping(value = "/page", method = RequestMethod.GET)
    public Response page(@ModelAttribute final ${entity} ${table.entityPath},
                         @ModelAttribute final PagePojo pagePojo) {
        return new ResponseCallBack() {
            @Override
            public void execute(ResponseCriteria criteria, Object... objects) {
                IPage<${entity}> page = i${entity}Service.selectPage(pagePojo, ${table.entityPath});
                criteria.addSingleResult(pageToResult(page));
            }
        }.sendRequest();
    }

    /**
     * 保存和修改
     * @param ${table.entityPath}  传递的实体
     * @return
     */
    @ApiOperation(value = "保存/修改$!{table.comment}")
    @RequestMapping(path = "", method = RequestMethod.PUT)
    public Response add(@RequestBody  ${entity} ${table.entityPath}, BindingResult bin,@ApiParam(value = "用户名称", required = false) @RequestHeader final String userName) {
        return new ResponseCallBack() {
            @Override
            public void execute(ResponseCriteria criteria, Object... objects) {
                if (StringUtils.isEmpty(${table.entityPath}.getId())) {
                    ${table.entityPath}.setCreateTime(LocalDateTime.now());
                    ${table.entityPath}.setCreateUser(userName);
                } else {
                    ${table.entityPath}.setUpdateTime(LocalDateTime.now());
                    ${table.entityPath}.setUpdateUser(userName);
                }
                i${entity}Service.saveOrUpdate(${table.entityPath});
            }
        }.sendRequest();
    }
    
    /**
	 * 获取单条记录
	 * 
	 * @return
	 */
	@ApiOperation(value = "获取单条记录")
	@RequestMapping(value = "/{id}", method = RequestMethod.GET)
	public Response page(@PathVariable final String id) {
		return new ResponseCallBack() {
			@Override
			public void execute(ResponseCriteria criteria, Object... objects) {
				${entity} data = i${entity}Service.getById(id);
				criteria.addSingleResult(data);
			}
		}.sendRequest();
	}

    /**
    * 根据id删除对象
    * @param ids  实体ID
    * @return
    */
    @ApiOperation(value = "根据id删除$!{table.comment}")
    @RequestMapping(path = "/{ids}", method = RequestMethod.DELETE)
    public Response delete(@PathVariable final String ids){
        return new ResponseCallBack() {
            @Override
            public void execute(ResponseCriteria criteria, Object... objects) {
                List<String> idList = Arrays.asList(ids.split(","));
                i${entity}Service.removeByIds(idList);
            }
        }.sendRequest();
    }

}
